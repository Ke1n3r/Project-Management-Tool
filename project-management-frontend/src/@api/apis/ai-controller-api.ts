/* tslint:disable */
/* eslint-disable */
/**
 * Project Management Tool API
 * API documentation for Project Management Tool
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AiElaborationResponseDto,
} from '../models/index';
import {
    AiElaborationResponseDtoFromJSON,
    AiElaborationResponseDtoToJSON,
} from '../models/index';

export interface ElaborateTaskRequest {
    taskId: number;
}

/**
 * 
 */
export class AiControllerApi extends runtime.BaseAPI {

    /**
     */
    async elaborateTaskRaw(requestParameters: ElaborateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AiElaborationResponseDto>> {
        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling elaborateTask().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/ai/elaborate/{taskId}`;
        urlPath = urlPath.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters['taskId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AiElaborationResponseDtoFromJSON(jsonValue));
    }

    /**
     */
    async elaborateTask(requestParameters: ElaborateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AiElaborationResponseDto> {
        const response = await this.elaborateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
