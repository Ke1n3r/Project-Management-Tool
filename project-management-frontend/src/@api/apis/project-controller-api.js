/* tslint:disable */
/* eslint-disable */
/**
 * Project Management Tool API
 * API documentation for Project Management Tool
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import { ProjectDtoFromJSON, ProjectDtoToJSON, } from '../models/index';
/**
 *
 */
export class ProjectControllerApi extends runtime.BaseAPI {
    /**
     */
    async createProjectRaw(requestParameters, initOverrides) {
        if (requestParameters['projectDto'] == null) {
            throw new runtime.RequiredError('projectDto', 'Required parameter "projectDto" was null or undefined when calling createProject().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        let urlPath = `/api/projects`;
        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectDtoToJSON(requestParameters['projectDto']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }
    /**
     */
    async createProject(requestParameters, initOverrides) {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async deleteProjectRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling deleteProject().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        let urlPath = `/api/projects/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async deleteProject(requestParameters, initOverrides) {
        await this.deleteProjectRaw(requestParameters, initOverrides);
    }
    /**
     */
    async getAllProjectsRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        let urlPath = `/api/projects`;
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ProjectDtoFromJSON));
    }
    /**
     */
    async getAllProjects(initOverrides) {
        const response = await this.getAllProjectsRaw(initOverrides);
        return await response.value();
    }
    /**
     */
    async getProjectByIdRaw(requestParameters, initOverrides) {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError('id', 'Required parameter "id" was null or undefined when calling getProjectById().');
        }
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        let urlPath = `/api/projects/{id}`;
        urlPath = urlPath.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id'])));
        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }
    /**
     */
    async getProjectById(requestParameters, initOverrides) {
        const response = await this.getProjectByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async updateProjectRaw(requestParameters, initOverrides) {
        if (requestParameters['projectDto'] == null) {
            throw new runtime.RequiredError('projectDto', 'Required parameter "projectDto" was null or undefined when calling updateProject().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearerAuth", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        let urlPath = `/api/projects`;
        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectDtoToJSON(requestParameters['projectDto']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectDtoFromJSON(jsonValue));
    }
    /**
     */
    async updateProject(requestParameters, initOverrides) {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
